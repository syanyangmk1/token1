#include <iostream>
#include <string>
#include <vector>

enum class TokenType {
	NUMBER,
	Plus , 
	Minus, 
	Multiple, 
	Divide,
	LEFT_PAREN,
	RIGHT_PAREN,
	INVALID
};

struct Token {
	std::string value;
	TokenType type;
};

bool isNumberChar(char c) {
	return (c >= '0' && c <= '9') || c == '.';
}

bool isValidNumber(const std::string& str) {
	for (char c : str) {
		if (!isNumberChar(c)) {
			return false;
		}
	}
	return true;
}

bool isValidOperator(char op) {
	return op == '+' || op == '-' || op == '*' || op == '/';
}

int main() {
	std::string input;
	std::cout << "Enter an expression: ";
	std::getline(std::cin, input);

	std::vector<Token> tokens;
	std::string currentToken;

	for (char c : input) {
		if (c == ' ') {
			continue; // Skip spaces
		}

		if (c == '(' || c == ')') {
			if (!currentToken.empty()) {
				tokens.push_back({ currentToken, TokenType::NUMBER });
				currentToken.clear();
			}
			if (c == '(') {
				tokens.push_back({ std::string(1, c), TokenType::LEFT_PAREN });
			}
			else {
				tokens.push_back({ std::string(1, c), TokenType::RIGHT_PAREN });
			}
		}
		else if (isNumberChar(c) || (c == '.' && isValidNumber(currentToken))) {
			currentToken += c;
		}
		else {
			if (!currentToken.empty()) {
				tokens.push_back({ currentToken, TokenType::NUMBER });
				currentToken.clear();
			}
			if (c == '+') {
				tokens.push_back({ std::string(1, c), TokenType::Plus });
			} else if (c == '-') {
				tokens.push_back({ std::string(1, c), TokenType::Minus });
			} else if (c == '*') {
				tokens.push_back({ std::string(1, c), TokenType::Multiple });
			} else if (c == '/') {
				tokens.push_back({ std::string(1, c), TokenType::Divide });
			}
			else {
				tokens.push_back({ std::string(1, c), TokenType::INVALID });
			}
		}
	}

	if (!currentToken.empty()) {
		tokens.push_back({ currentToken, TokenType::NUMBER });
	}

	for (const Token& token : tokens) {
		std::cout << "Token: " << token.value << " Type: ";
		switch (token.type) {
		case TokenType::NUMBER:
			std::cout << "Number";
			break;
		case TokenType::Plus:
			std::cout << "Plus";
			break;
		case TokenType::Minus:
			std::cout << "Minus";
			break;
		case TokenType::Multiple:
			std::cout << "Multiple";
			break;
		case TokenType::Divide:
			std::cout << "Divide";
			break;			
		case TokenType::LEFT_PAREN:
			std::cout << "Left Parenthesis";
			break;
		case TokenType::RIGHT_PAREN:
			std::cout << "Right Parenthesis";
			break;
		case TokenType::INVALID:
			std::cout << "Invalid";
			break;
		}
		std::cout << std::endl;
	}

	return 0;
}
